{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/basic/basic.component.css","webpack:///./src/app/basic/basic.component.html","webpack:///./src/app/basic/basic.component.ts","webpack:///./src/app/basic/bootstrap/bootstrap.component.css","webpack:///./src/app/basic/bootstrap/bootstrap.component.html","webpack:///./src/app/basic/bootstrap/bootstrap.component.ts","webpack:///./src/app/basic/class-binding/class-binding.component.css","webpack:///./src/app/basic/class-binding/class-binding.component.html","webpack:///./src/app/basic/class-binding/class-binding.component.ts","webpack:///./src/app/basic/event-filtering/event-filtering.component.css","webpack:///./src/app/basic/event-filtering/event-filtering.component.html","webpack:///./src/app/basic/event-filtering/event-filtering.component.ts","webpack:///./src/app/basic/event-propagation/event-propagation.component.css","webpack:///./src/app/basic/event-propagation/event-propagation.component.html","webpack:///./src/app/basic/event-propagation/event-propagation.component.ts","webpack:///./src/app/basic/html-attr/html-attr.component.css","webpack:///./src/app/basic/html-attr/html-attr.component.html","webpack:///./src/app/basic/html-attr/html-attr.component.ts","webpack:///./src/app/basic/ng-contant/ng-contant.component.css","webpack:///./src/app/basic/ng-contant/ng-contant.component.html","webpack:///./src/app/basic/ng-contant/ng-contant.component.ts","webpack:///./src/app/basic/template-variabels/template-variabels.component.css","webpack:///./src/app/basic/template-variabels/template-variabels.component.html","webpack:///./src/app/basic/template-variabels/template-variabels.component.ts","webpack:///./src/app/basic/two-way-binding/two-way-binding.component.css","webpack:///./src/app/basic/two-way-binding/two-way-binding.component.html","webpack:///./src/app/basic/two-way-binding/two-way-binding.component.ts","webpack:///./src/app/forms/form-basic/form-basic.component.css","webpack:///./src/app/forms/form-basic/form-basic.component.html","webpack:///./src/app/forms/form-basic/form-basic.component.ts","webpack:///./src/app/forms/form-disablesubmit/form-disablesubmit.component.css","webpack:///./src/app/forms/form-disablesubmit/form-disablesubmit.component.html","webpack:///./src/app/forms/form-disablesubmit/form-disablesubmit.component.ts","webpack:///./src/app/forms/form-examples/form-angular/form-angular.component.css","webpack:///./src/app/forms/form-examples/form-angular/form-angular.component.html","webpack:///./src/app/forms/form-examples/form-angular/form-angular.component.ts","webpack:///./src/app/forms/form-examples/form-angular/hero.ts","webpack:///./src/app/forms/form-examples/form-examples.component.css","webpack:///./src/app/forms/form-examples/form-examples.component.html","webpack:///./src/app/forms/form-examples/form-examples.component.ts","webpack:///./src/app/forms/form-examples/form-exercise/form-exercise.component.css","webpack:///./src/app/forms/form-examples/form-exercise/form-exercise.component.html","webpack:///./src/app/forms/form-examples/form-exercise/form-exercise.component.ts","webpack:///./src/app/forms/form-ngform/form-ngform.component.css","webpack:///./src/app/forms/form-ngform/form-ngform.component.html","webpack:///./src/app/forms/form-ngform/form-ngform.component.ts","webpack:///./src/app/forms/form-ngmodel/form-ngmodel.component.css","webpack:///./src/app/forms/form-ngmodel/form-ngmodel.component.html","webpack:///./src/app/forms/form-ngmodel/form-ngmodel.component.ts","webpack:///./src/app/forms/form-ngmodelgroup/form-ngmodelgroup.component.css","webpack:///./src/app/forms/form-ngmodelgroup/form-ngmodelgroup.component.html","webpack:///./src/app/forms/form-ngmodelgroup/form-ngmodelgroup.component.ts","webpack:///./src/app/forms/form-validations/form-validations.component.css","webpack:///./src/app/forms/form-validations/form-validations.component.html","webpack:///./src/app/forms/form-validations/form-validations.component.ts","webpack:///./src/app/forms/forms.component.css","webpack:///./src/app/forms/forms.component.html","webpack:///./src/app/forms/forms.component.ts","webpack:///./src/app/routing/routing.component.css","webpack:///./src/app/routing/routing.component.html","webpack:///./src/app/routing/routing.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","\nimport { NgModule } from \"@angular/core\";\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { BasicComponent } from './basic/basic.component';\nimport { FormsComponent } from './forms/forms.component';\nimport { FormAngularComponent } from './forms/form-examples/form-angular/form-angular.component';\nimport { FormExerciseComponent } from './forms/form-examples/form-exercise/form-exercise.component';\nimport { FormExamplesComponent } from './forms/form-examples/form-examples.component';\nimport { RoutingComponent } from './routing/routing.component';\n\nconst appRoutes: Routes = [\n  { path: '', 'component': BasicComponent },\n  { path: 'basic', 'component': BasicComponent },\n  { path: 'forms', 'component': FormsComponent, children: [\n    { path: 'examples', 'component': FormExamplesComponent },\n  ] },\n  { path: 'routing', 'component': RoutingComponent }\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(appRoutes)\n  ],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {\n}","module.exports = \"@import url('https://unpkg.com/bootstrap@3.3.7/dist/css/bootstrap.min.css');\"","module.exports = \"\\n<nav class=\\\"nav\\\">\\n  <a class=\\\"nav-link active\\\" routerLinkActive=\\\"active\\\" [routerLinkActiveOptions]=\\\"{exact: true}\\\" routerLink=\\\"/basic\\\" href=\\\"#\\\">Basic</a>\\n  <a class=\\\"nav-link active\\\" routerLink=\\\"/forms\\\">Forms</a>\\n  <a class=\\\"nav-link active\\\" routerLink=\\\"/routing\\\">Routing</a>\\n  <a class=\\\"nav-link disabled\\\" href=\\\"#\\\">Disabled</a>\\n</nav>\\n\\n<router-outlet></router-outlet>\\n\\n<!-- \\n\\n\\n\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-6\\\" style=\\\"border-style: ridge;\\\">\\n    <hr>\\n    <h4>Note: Html Attribute Binind</h4>\\n    <app-html-attr></app-html-attr>\\n    <hr>\\n    <h4>Note: Adding bootstrap</h4>\\n    <app-bootstrap></app-bootstrap>\\n    <hr>\\n    <h4>Note: Class Binding</h4>\\n    <app-class-binding></app-class-binding>\\n    <hr>\\n    <h4>Note: Event Propagation</h4>\\n    <app-event-propagation></app-event-propagation>\\n    <hr>\\n    <h4>Note: Event Filtering</h4>\\n    <app-event-filtering></app-event-filtering>\\n    <hr>\\n    <h4>Note: Template Variables</h4>\\n    <app-template-variabels></app-template-variabels>\\n    <hr>\\n    <h4>Note: Using ng-conant</h4>\\n    <app-ng-contant>\\n      <div class=\\\"heading\\\">This is The Panel Heading Coming from app-component</div>\\n      <div class=\\\"body\\\">\\n        This is The Body Coming from app-component\\n        <h5>Some Body ...</h5>\\n      </div>\\n    </app-ng-contant>\\n    <hr>      \\n  </div>\\n  <div class=\\\"col-6\\\" style=\\\"border-style: ridge;\\\">    \\n    <hr>\\n    <h4>Note: Two way binding</h4>\\n    <app-two-way-binding></app-two-way-binding>\\n    <hr>    \\n    <h4>Note: Form Basic</h4>\\n    <app-form-basic></app-form-basic>\\n    <hr>\\n  </div>\\n</div> -->\\n\\n<!-- <hr>\\n<h4>Note: Html Attribute Binind</h4>\\n<app-html-attr></app-html-attr>\\n<hr>\\n<h4>Note: Adding bootstrap</h4>\\n<app-bootstrap></app-bootstrap>\\n<hr>\\n<h4>Note: Class Binding</h4>\\n<app-class-binding></app-class-binding>\\n<hr>\\n<h4>Note: Event Propagation</h4>\\n<app-event-propagation></app-event-propagation>\\n<hr>\\n<h4>Note: Event Filtering</h4>\\n<app-event-filtering></app-event-filtering>\\n<hr>\\n<h4>Note: Template Variables</h4>\\n<app-template-variabels></app-template-variabels>\\n<hr>\\n<h4>Note: Using ng-conant</h4>\\n<app-ng-contant>\\n  <div class=\\\"heading\\\">This is The Panel Heading Coming from app-component</div>\\n  <div class=\\\"body\\\">\\n    This is The Body Coming from app-component\\n    <h5>Some Body ...</h5>\\n  </div>\\n</app-ng-contant>\\n<hr> -->\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app';\n}\n","\nimport { BrowserModule } from '@angular/platform-browser';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { FormsModule } from '@angular/forms'\nimport { NgModule } from '@angular/core';\nimport { AppRoutingModule } from './app-routing.module';\n\nimport { AppComponent } from './app.component';\nimport { HtmlAttrComponent } from './basic/html-attr/html-attr.component';\nimport { BootstrapComponent } from './basic/bootstrap/bootstrap.component';\nimport { ClassBindingComponent } from './basic/class-binding/class-binding.component';\nimport { EventPropagationComponent } from './basic/event-propagation/event-propagation.component';\nimport { EventFilteringComponent } from './basic/event-filtering/event-filtering.component';\nimport { TemplateVariabelsComponent } from './basic/template-variabels/template-variabels.component';\nimport { NgContantComponent } from './basic/ng-contant/ng-contant.component';\nimport { TwoWayBindingComponent } from './basic/two-way-binding/two-way-binding.component';\nimport { FormBasicComponent } from './forms/form-basic/form-basic.component';\nimport { BasicComponent } from './basic/basic.component';\nimport { FormsComponent } from './forms/forms.component';\nimport { FormNgmodelComponent } from './forms/form-ngmodel/form-ngmodel.component';\nimport { FormValidationsComponent } from './forms/form-validations/form-validations.component';\nimport { FormNgformComponent } from './forms/form-ngform/form-ngform.component';\nimport { FormNgmodelgroupComponent } from './forms/form-ngmodelgroup/form-ngmodelgroup.component';\nimport { FormDisablesubmitComponent } from './forms/form-disablesubmit/form-disablesubmit.component';\nimport { FormAngularComponent } from './forms/form-examples/form-angular/form-angular.component';\nimport { FormExerciseComponent } from './forms/form-examples/form-exercise/form-exercise.component';\nimport { FormExamplesComponent } from './forms/form-examples/form-examples.component';\nimport { RoutingComponent } from './routing/routing.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HtmlAttrComponent,\n    BootstrapComponent,\n    ClassBindingComponent,\n    EventPropagationComponent,\n    EventFilteringComponent,\n    TemplateVariabelsComponent,\n    NgContantComponent,\n    TwoWayBindingComponent,\n    FormBasicComponent,\n    BasicComponent,\n    FormsComponent,\n    FormNgmodelComponent,\n    FormValidationsComponent,\n    FormNgformComponent,\n    FormNgmodelgroupComponent,\n    FormDisablesubmitComponent,\n    FormAngularComponent,\n    FormExerciseComponent,\n    FormExamplesComponent,\n    RoutingComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    AppRoutingModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"\"","module.exports = \"<div class=\\\"row\\\">\\n  <!-- this is the left column -->\\n  <div class=\\\"col-6\\\" style=\\\"border-style: ridge;\\\">\\n    <hr>\\n    <h4>Note: Html Attribute Binind</h4>\\n    <app-html-attr></app-html-attr>\\n    <hr>\\n    <h4>Note: Adding bootstrap</h4>\\n    <app-bootstrap></app-bootstrap>\\n    <hr>\\n    <h4>Note: Class Binding</h4>\\n    <app-class-binding></app-class-binding>\\n    <hr>\\n    <h4>Note: Event Propagation</h4>\\n    <app-event-propagation></app-event-propagation>\\n    <hr>\\n    <h4>Note: Event Filtering</h4>\\n    <app-event-filtering></app-event-filtering>\\n    <hr>\\n    <h4>Note: Template Variables</h4>\\n    <app-template-variabels></app-template-variabels>\\n    <hr>\\n    <h4>Note: Using ng-conant</h4>\\n    <app-ng-contant>\\n      <div class=\\\"heading\\\">This is The Panel Heading Coming from app-component</div>\\n      <div class=\\\"body\\\">\\n        This is The Body Coming from app-component\\n        <h5>Some Body ...</h5>\\n      </div>\\n    </app-ng-contant>\\n    <hr>      \\n  </div>\\n  <div class=\\\"col-6\\\" style=\\\"border-style: ridge;\\\">\\n    <!-- this is the right column -->\\n    <hr>\\n    <h4>Note: Two way binding</h4>\\n    <app-two-way-binding></app-two-way-binding>\\n    <hr>\\n  </div>\\n</div>\\n  \"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-basic',\n  templateUrl: './basic.component.html',\n  styleUrls: ['./basic.component.css']\n})\nexport class BasicComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<h5>There are two ways of adding bootstrap support</h5>\\n<ol>\\n  <li>Adding into angular-cli.json</li>\\n  <li>Adding into style.css</li>\\n</ol>\\n<b>Option-1: using angular-cli.json</b>\\n<pre>\\n  # npm install --save bootstrap@3\\n    \\n  // open the file .angular-cli.json and add the boostrap css file in it\\n  -) under the section \\\"styles\\\": [ ... ]\\n  -) add the entry \\\"../node_modules/bootstrap/dist/css/bootstrap.min.css\\\"    \\n</pre>\\n<b>Option-2: edit the file sytle.css</b>\\n<ul>\\n  <li><code>run: npm install bootstrap --save</code></li>\\n  <li><code>edit style.css add the line: @import \\\"~bootstrap/dist/css/bootstrap.css;\\\"</code></li>\\n</ul>\\n<p>Let test the bootstrap by adding a primary button - it should be blue color</p>\\n<button class=\\\"btn btn-primary\\\">save</button>\\n\\n\\n\\n\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-bootstrap',\n  templateUrl: './bootstrap.component.html',\n  styleUrls: ['./bootstrap.component.css']\n})\nexport class BootstrapComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<h5>Its possible to use a variation of property binding to bing into a html class</h5>\\nFor example:\\n<pre>\\n<code>\\n  &lt;button class=\\\"btn btn-primary\\\" [class.<mark>active</mark>]&gt;save&gt;/button&gt;  \\n  <strong>active: is the name of the target class of button</strong>\\n  \\n  In the component you can use:\\n  <strong><code>this.active = true | false</code></strong>\\n  </code>\\n<pre>\\n<div class=\\\"row\\\" style=\\\"width: 200px;\\\">\\n<button class=\\\"btn btn-primary\\\" [style.backgroundColor]=\\\"yellow\\\">save</button>  \\n<button class=\\\"btn btn-primary\\\" (click)=\\\"onClickMe()\\\">click me</button>  \\n</div>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-class-binding',\n  templateUrl: './class-binding.component.html',\n  styleUrls: ['./class-binding.component.css']\n})\nexport class ClassBindingComponent implements OnInit {\n  active = false;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  onClickMe() {    \n    this.active = ! this.active;  \n    console.log(\"[ClassBindingComponent:onClickMe] this.active = \" + this.active);\n  }\n\n}\n","module.exports = \"\"","module.exports = \"\\n<pre>\\n  Anguler can filtering an event so you don't have to check it with if (event.something === .. like event.keCode === 13 for enter) then ..  \\n  <u>For example</u>        \\n    <p>// the onKeyUp will called only on pressing enter</p>\\n    &lt;input&gt; (keyup.enter)=\\\"onKeyUp()\\\"/&gt;\\n  <code>\\n    onKeyUp() &#123;\\n      console.log(\\\"Enter was press!\\\");\\n    &#125;\\n  </code>\\n</pre>\\nType few characters then press Enter:\\n<p>data = <strong>{{ data }}</strong></p>\\n<input (keyup.enter)=\\\"onKeyUp($event)\\\"/>\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-event-filtering',\n  templateUrl: './event-filtering.component.html',\n  styleUrls: ['./event-filtering.component.css']\n})\nexport class EventFilteringComponent implements OnInit {\n\n  data = ''\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  onKeyUp($event) {\n    console.log(\"Enter was press!\");\n    console.log(\"Enter was press!, value = \", $event.target.value);\n    this.data = $event.target.value;\n    //this.data = $event.value;\n  }\n}\n","module.exports = \"\"","module.exports = \"<pre>\\n  DOM is using event propagation so when event is fired on all elements where define in it path up to the root element\\n  So if:\\n    &lt;element-1&gt;\\n      &lt;element-2&gt;\\n        &lt;element-3&gt;\\n  if element-3 event is firing then its goes up to element-2 and well as element-3.  \\n\\n  To stop this propagation use in the component event handler:\\n  <code>\\n    onClick($event) \\t&#123;\\n      event.stopPropagation;\\n    &#125;\\n  </code>\\n</pre>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-event-propagation',\n  templateUrl: './event-propagation.component.html',\n  styleUrls: ['./event-propagation.component.css']\n})\nexport class EventPropagationComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<p>Thml attribute are in most cases 1-to-1 mapping with DOM element BUT not in all cases.</p>\\n<p>Also the opposite, html attribute may not have DOM attribute</p>\\n<p>When using attribute binding we are binding into a DOM attribute (not the html).</p>\\n<p>So When need to targing HTML attribute need to tell Angular about it by adding 'attr.' prefix</p>\\n<p>For example: </p>\\n<pre>\\n  &lt;table&gt;\\n    &lt;tr&gt;\\n      &lt;td [attr.colspan]=\\\"colspan\\\"&gt; Table Data &lt;/td&gt;\\n    &lt;tr&gt;\\n  &lt;/table&gt;\\n</pre>  \\n<table>\\n  <tr>\\n    <td [attr.colspan]=\\\"colspan\\\">Table Data</td>\\n  </tr>\\n</table>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-html-attr',\n  templateUrl: './html-attr.component.html',\n  styleUrls: ['./html-attr.component.css']\n})\nexport class HtmlAttrComponent implements OnInit {\n\n  colspen = 2;\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \".panel {\\n  color: rebeccapurple;\\n}\"","module.exports = \"\\nUse when needed to inject a contant to the template from outside.\\nYou can use property binding but in cases where it is more complex contant use ng-contant.\\nng-content enable the component user to customize the content of a component.\\n\\n<p>For example the template looking like:</p>\\n<pre style=\\\"color: blueviolet\\\">\\n&lt;div class=\\\"panel panel-default\\\"&gt;\\n  &lt;div class=\\\"panel-heading\\\"&gt;\\n    <span style=\\\"color: darkblue\\\">// identify the ng-contant select as class=\\\"heading\\\"</span>\\n    &lt;ng-contnat select=\\\".heading\\\"&gt;&lt;/ng-contant&gt;\\n  &lt;/div&gt;\\n  &lt;div class=\\\"panel-body\\\"&gt;\\n    <span style=\\\"color: darkblue\\\">// identify the ng-contant select as class=\\\"body\\\"</span>\\n    &lt;ng-contnat select=\\\".body\\\"&gt;&lt;/ng-contant&gt;\\n  &lt;/div&gt;\\n&lt;/div&gt;\\n</pre>\\n\\nTo use this component:\\n<pre style=\\\"color: blueviolet\\\">\\n&lt;the-component&gt;\\n  &lt;div class=\\\"heading\\\"&gt;&lt;/div&gt;\\n  &lt;div class=\\\"body\\\"&gt;\\n    &lt;h2&gt;This is body&lt;/h2&gt;\\n  &lt;/div&gt;    \\n&gt;/the-component&gt;\\n</pre>\\n\\n<div class=\\\"panel panel-default\\\">\\n  <div class=\\\"panel-heading\\\">\\n    <ng-content select=\\\".heading\\\"></ng-content>\\n  </div>\\n  <div class=\\\"panel-body\\\">\\n    <ng-content select=\\\".body\\\"></ng-content>\\n  </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-ng-contant',\n  templateUrl: './ng-contant.component.html',\n  styleUrls: ['./ng-contant.component.css']\n})\nexport class NgContantComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \".pre {\\n  margin: 0px;\\n  padding: 0px;\\n}\"","module.exports = \"\\nPassing variables from template to component can be done in two ways\\n<ol>\\n  <li>Passing by $event</li>\\n  <li>Passing by #something</li>\\n</ol>\\n<b>Option-1: passing by $event</b>\\n<pre>\\n  &lt;input&gt; (keyup.enter)=\\\"onKeyUp($event)\\\"/&gt;\\n  <code>\\n  onKeyUp($event) \\t&#123;\\n    console.log($event.target.value);\\n  &#125;\\n  </code>    \\n</pre>\\n<b>Option-2: passing by #something</b>\\n<pre>\\n  &lt;input&gt; #email (keyup.enter)=\\\"onKeyUp(email.value)\\\"/&gt;\\n  <strong>#email: is a referance to input field.</strong>\\n  <code>\\n  onKeyUp(email) \\t&#123;\\n    console.log(email);\\n  &#125;\\n  </code>    \\n</pre>\\n\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-4\\\">    \\n    <p>option-1: <strong>{{ option1_data }}</strong></p>\\n  </div>  \\n  <div class=\\\"col-4\\\">\\n    <p>option-2: <strong>{{ option2_data }}</strong></p>\\n  </div>\\n</div>        \\n\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-4\\\">    \\n    option-1: <input (keyup.enter)=\\\"onKeyUp1($event)\\\"/>\\n  </div>  \\n  <div class=\\\"col-4\\\">\\n    option-2: <input #email (keyup.enter)=\\\"onKeyUp2(email.value)\\\"/>\\n  </div>\\n</div>  \\n\\n\\n  \\n  \"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-template-variabels',\n  templateUrl: './template-variabels.component.html',\n  styleUrls: ['./template-variabels.component.css']\n})\nexport class TemplateVariabelsComponent implements OnInit {\n\n  option1_data = '';\n  option2_data = '';\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  onKeyUp1($event) {\n    console.log(\"onKeyUp1 - value: \", $event.target.value);\n    this.option1_data = $event.target.value;\n  }\n\n  onKeyUp2(email) {\n    console.log(\"onKeyUp2 - value: \", email);\n    this.option2_data = email;\n  }\n}\n","module.exports = \"\"","module.exports = \"\\nTo enable two communication between a component and a view.\\n<p></p>\\n<pre>\\n<b>Option-1: by inline in the event binding</b>\\n&lt;input&gt; [value]=\\\"email\\\" (keyup.enter)=\\\"email = $event.target.value; onKeyUp($event)\\\"/&gt;\\n<code>\\nonKeyUp() \\t&#123;\\n  console.log(\\\"email = \\\", email);\\n&#125;\\n</code>    \\n</pre>\\n<pre>\\n<b>Option-2: using angular ngModel two way data binding</b>\\n&lt;input&gt; [(ngModel)]=\\\"email\\\" (keyup.enter)=\\\"onKeyUp($event)\\\"/&gt;\\n<code>\\nonKeyUp() \\t&#123;\\n  console.log(\\\"email = \\\", email);\\n&#125;\\n</code>    \\n</pre>\\n    \\n<div class=\\\"row\\\">\\n  <div class=\\\"col-4\\\">    \\n    <p>option-1: <strong>{{ option1_data }}</strong></p>\\n  </div>  \\n  <div class=\\\"col-4\\\">\\n    <p>option-2: <strong>{{ option2_data }}</strong></p>\\n  </div>\\n</div>   \\n\\n<div class=\\\"row\\\">  \\n  <div class=\\\"col-4\\\">        \\n    <p>Two way binding by inline the (keyup.enter) event binding</p>\\n    option-1: <input [value]=\\\"email1\\\" (keyup.enter)=\\\"email1 = $event.target.value; onKeyUp1()\\\"/>\\n  </div>  \\n\\n  <div class=\\\"col-4\\\">\\n      <p>Two way binding by using angular ngModel</p>\\n      option-2: <input [(ngModel)]=\\\"email2\\\" (keyup.enter)=\\\"onKeyUp2()\\\"/>       \\n    </div>\\n</div>  \\n\\n\\n  \\n  \"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-two-way-binding',\n  templateUrl: './two-way-binding.component.html',\n  styleUrls: ['./two-way-binding.component.css']\n})\nexport class TwoWayBindingComponent implements OnInit {\n\n  option1_data = '';\n  option2_data = '';\n\n  email1 = 'you@someplace.com';\n  email2 = 'me@elsewhere.com';\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  onKeyUp1() {    \n    console.log(\"[onKeyUp1: email = \", this.email1);\n    this.option1_data = this.email1;\n  }\n\n  onKeyUp2() {    \n    console.log(\"[onKeyUp2: email = \", this.email2);\n    this.option2_data = this.email2;\n  }\n}\n","module.exports = \"\"","module.exports = \"<pre>\\n  <b>FormControl</b>: for each input field in the form need to create intnace of FormControl class\\n  <b>FormGroup</b>: a group of FormControl, validation of group is validation of all FormControl in the group\\n  <b>Template Driven Form</b>: using angular directives to create FormContorl\\n  <b>Reactive Form</b>: using a code to create FormControl\\n</pre>\\n<form>\\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"firstName\\\">First Name</label>\\n    <input class=\\\"form-control\\\" type=\\\"text\\\" id=\\\"firstName\\\">\\n  </div>\\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"comment\\\">Comment</label>\\n    <textarea id=\\\"\\\" cols=\\\"30\\\" rows=\\\"10\\\" class=\\\"form-control\\\"></textarea>\\n  </div>\\n    <button class=\\\"btn btn-primary\\\">Submit</button>\\n</form>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-form-basic',\n  templateUrl: './form-basic.component.html',\n  styleUrls: ['./form-basic.component.css']\n})\nexport class FormBasicComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<pre>\\nUse fm.valid to disabled / enable the submit button\\n\\n&lt;form <b style=\\\"color:red;\\\">#fm=\\\"ngForm\\\" (ngSubmit)=\\\"submit(fm)\\\"</b>&gt;\\n  &lt;div ngModelGroup=\\\"contact\\\" #contact=\\\"ngModelGroup\\\"&gt;\\n    &lt;div class=\\\"form-group\\\"&gt;\\n      &lt;label for=\\\"firstName\\\"&gt;First Name&lt;/label&gt;\\n      &lt;input <b style=\\\"color:red;\\\">require minlegnth=\\\"3\\\" maxlength=10 pattern=\\\"banana\\\" </b> <b>ngModel name=\\\"firstName\\\"</b> #firstName (change)=\\\"log(firstName)\\\" class=\\\"form-control\\\" type=\\\"text\\\" id=\\\"firstName\\\"&gt;\\n      &lt;div class=\\\"alert alert-danger\\\" *ngIf=\\\"firstName.touched && !firstName.valid\\\"&gt;\\n        &lt;div *ngIf=\\\"firstName.errors.required\\\">First name is require ..&lt;/div&gt;\\n        &lt;div *ngIf=\\\"firstName.errors.minlength\\\">First name should be minimum 3 charachters&lt;/div&gt;\\n        &lt;div *ngIf=\\\"firstName.errors.pattern\\\">First name doesn't match the pattern&lt;/div&gt;\\n      &lt;/div&gt;\\n    &lt;/div&gt;\\n  &lt;/div&gt;\\n  &lt;button class=\\\"btn btn-primary\\\" <b style=\\\"color:red;\\\">[disabled]=\\\"fm.valid\\\"</b> &gt;Submit&lt;button&gt;\\n&lt;/form&gt;\\n</pre>\\n<form #fm=\\\"ngForm\\\" (ngSubmit)=\\\"submit(fm)\\\">\\n  <div ngModelGroup=\\\"contact\\\" #contact=\\\"ngModelGroup\\\">\\n    <div *ngIf=\\\"!contact.valid\\\">Validation errors of that group</div>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"firstName\\\">First Name</label>      \\n      <input ngModel name=\\\"firstName\\\" minlegnth=\\\"3\\\" maxlength=10 pattern=\\\"banana\\\" #firstName=\\\"ngModel\\\" (change)=\\\"log(firstName)\\\" class=\\\"form-control\\\" type=\\\"text\\\" id=\\\"firstName\\\">\\n      <div class=\\\"alert alert-danger\\\" *ngIf=\\\"firstName.touched && !firstName.valid\\\">\\n        <div *ngIf=\\\"firstName.errors.required\\\">First name is require ..</div>\\n        <div *ngIf=\\\"firstName.errors.minlength\\\">First name should be minimum {{firstName.errors.minlength.requiredLength}} charachters</div>\\n        <div *ngIf=\\\"firstName.errors.pattern\\\">First name doesn't match the pattern</div>\\n      </div>\\n    </div> \\n  </div>\\n\\n  <button class=\\\"btn btn-primary\\\" [disabled]=\\\"fm.valid\\\">Submit</button>\\n</form>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-form-disablesubmit',\n  templateUrl: './form-disablesubmit.component.html',\n  styleUrls: ['./form-disablesubmit.component.css']\n})\nexport class FormDisablesubmitComponent {\n\n  constructor() { }\n\n  log(what) {\n    console.log(what);\n  }\n\n  submit(fm) {\n    console.log(\"fm = \", fm);\n  }\n}\n","module.exports = \".ng-valid[required], .ng-valid.required  {\\n  border-left: 5px solid #42A948; /* green */\\n}\\n\\n.ng-invalid:not(form)  {\\n  border-left: 5px solid #a94442; /* red */\\n}\\n\\n/* body { \\n  padding-left: 10px;   \\n} */\"","module.exports = \"<div [hidden]=\\\"submitted\\\">  \\n  <h3>Hero Form</h3>\\n  {{diagnostic}}\\n  <form #heroForm=\\\"ngForm\\\" (ngSubmit)=\\\"onSubmit(heroForm)\\\">\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"name\\\">Name</label>      \\n      <input  class=\\\"form-control\\\" type=\\\"text\\\" ngModel name=\\\"name\\\" #spy #name=\\\"ngModel\\\" id=\\\"name\\\" required [(ngModel)]=\\\"model.name\\\" (change)=\\\"log(name)\\\">\\n      <div class=\\\"alert alert-danger\\\"[hidden]=\\\"name.valid || name.pristine\\\">Name is required</div>\\n      TODO: remove this: {{model.name}} : {{spy.className}}\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"alterEgo\\\">Alter Ego</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"alterEgo\\\" ngModel name=\\\"alterEgo\\\" #alterEgo=\\\"ngModel\\\" [(ngModel)]=\\\"model.alterEgo\\\" (change)=\\\"log(alterEgo)\\\">\\n      TODO: remove this: {{model.alterEgo}}\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"power\\\">Hero Power</label>\\n      <select class=\\\"form-control\\\" id=\\\"power\\\" required ngModel name=\\\"power\\\" #power=\\\"ngModel\\\" [(ngModel)]=\\\"model.power\\\" (change)=\\\"log(power)\\\">\\n        <option *ngFor=\\\"let pow of powers\\\" [value]=\\\"pow\\\">{{pow}}</option>\\n      </select>\\n      TODO: remove this: {{model.power}}\\n    </div>\\n\\n    <!-- \\n      *Submit*: the (type=\\\"submit\\\") makes it the form submit button. \\n      (ngSubmit)=\\\"onSubmit()\\\" #heroForm=\\\"ngForm\\\": this make the form accessable with in the submit button.\\n      [disabled]=\\\"!heroForm.form.valid\\\": bound the overall form validation to disabled attribute.\\n\\n      *New Hero*: heroForm.reset() need to ba called to reset the heroForm validator flags\\n      the form may remember some flags prior to new hero click so need to reset.\\n    -->\\n    <button type=\\\"submit\\\" class=\\\"btn btn-success\\\" style=\\\"margin-right: 10px\\\" [disabled]=\\\"!heroForm.form.valid\\\">Submit</button>\\n    <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" style=\\\"margin-right: 10px\\\" (click)=\\\"newHero(); heroForm.reset()\\\">New Hero</button>\\n\\n  </form>  \\n</div>\\n<div [hidden]=\\\"!submitted\\\">\\n  <h2>You submitted the following:</h2>\\n  <div class=\\\"row\\\" style=\\\"padding-left: 10px;\\\">\\n    <div class=\\\"col-xs-3\\\">Name: </div>\\n    <div class=\\\"col-xs-9  pull-left\\\" style=\\\"color: red;\\\">{{ model.name }}</div>\\n  </div>\\n  <div class=\\\"row\\\" style=\\\"padding-left: 10px;\\\">\\n    <div class=\\\"col-xs-3\\\">Alter Ego: </div>\\n    <div class=\\\"col-xs-9 pull-left\\\" style=\\\"color: red;\\\">{{ model.alterEgo }}</div>\\n  </div>\\n  <div class=\\\"row\\\" style=\\\"padding-left: 10px;\\\">\\n    <div class=\\\"col-xs-3\\\">Power: </div>\\n    <div class=\\\"col-xs-9 pull-left\\\" style=\\\"color: red;\\\">{{ model.power }}</div>\\n  </div>\\n  <br>\\n  <button class=\\\"btn btn-primary\\\" (click)=\\\"submitted=false\\\">Edit</button>\\n</div>\"","import { Hero } from './hero';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-form-angular',\n  templateUrl: './form-angular.component.html',\n  styleUrls: ['./form-angular.component.css']\n})\nexport class FormAngularComponent {                 \n\n powers = ['Really Smart', \n           'Super Flexible',\n           'Super Hot', \n           'Weather Changer'];\n\n  model = new Hero(18, 'Dr IQ', this.powers[0], 'Chuck Overstreet');\n\n  submitted = false;\n\n  onSubmit(heroForm) { \n    this.submitted = true; \n    console.log(\"heroForm = \", heroForm);\n  }\n\n  // TODO: Remove this when we're done\n  get diagnostic() { return JSON.stringify(this.model); }\n\n  log(what) {\n    console.log(what);\n  }\n\n  newHero() {\n    this.model = new Hero(42, '', '');\n  }\n  \n}\n","export class Hero {\n  constructor(\n    public id: number,\n    public name: string,\n    public power: string,\n    public alterEgo?: string\n  ) {  }\n}","module.exports = \"\"","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-6\\\">\\n    <div class=\\\"panel panel-default\\\">\\n      <div class=\\\"panel-heading\\\">\\n        <h1 class=\\\"panel-title\\\">Angular Tutorial: Template Driven Form</h1>\\n      </div>    \\n      <div class=\\\"panel-body\\\">\\n        <app-form-angular></app-form-angular>\\n      </div>\\n    </div>\\n  </div>\\n\\n  <div class=\\\"col-6\\\">\\n    <div class=\\\"panel panel-default\\\" style=\\\"margin-right: 10px\\\">\\n      <div class=\\\"panel-heading\\\">\\n        <h1 class=\\\"panel-title\\\">Template Driven Exercise</h1>\\n      </div>    \\n      <div class=\\\"panel-body\\\">\\n        <app-form-exercise></app-form-exercise>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-form-examples',\n  templateUrl: './form-examples.component.html',\n  styleUrls: ['./form-examples.component.css']\n})\nexport class FormExamplesComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"/*.ng-valid[required], .ng-valid.required  {\\n  border: 2px solid #42A948; \\n}\\n\\n.ng-invalid:not(form)  {\\n  border: 2px solid #a94442; \\n}\\n*/\\n\\n/**\\n * this apply to all element with classes of \\n * form-control && ng-touched && ng-invalid.\\n *\\n * Angular add ng-touched && ng-invalid when apply form-control.\\n */\\n\\n.form-control.ng-touched.ng-invalid {\\n  border: 2px solid red;\\n}\\n\\n.alert.alert-danger {\\n  margin: 0px;\\n  /* padding: 0px; */\\n}\"","module.exports = \"<div [hidden]=\\\"submitted\\\">\\n  <h3>Exercise Form</h3>\\n  {{diagnostic}}\\n  <form #courseForm=\\\"ngForm\\\" (ngSubmit)=\\\"onSubmit(courseForm)\\\">\\n    <div class=\\\"form-group\\\">\\n      <b><label for=\\\"name\\\">Course Name</label></b>\\n      <input \\n        class=\\\"form-control\\\" \\n        type=\\\"text\\\" ngModel name=\\\"courseName\\\" \\n        #spy #courseName=\\\"ngModel\\\" \\n        id=\\\"name\\\" \\n        required \\n        minlength=\\\"4\\\" \\n        [(ngModel)]=\\\"name\\\" \\n        (change)=\\\"log(courseName)\\\">\\n      <div class=\\\"alert alert-danger\\\" [hidden]=\\\"courseName.valid || courseName.pristine\\\">Course Name is required</div>\\n      <div class=\\\"alert alert-danger\\\" *ngIf=\\\"courseName.errors && courseName.errors.minlength\\\">Name minimum charachters is {{ courseName.errors.minlength.requiredLength}}</div>\\n\\n      TODO: remove this: {{name}} : {{spy.className}}\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <b><label for=\\\"categories\\\">Category</label></b>\\n      <select class=\\\"form-control\\\" id=\\\"categories\\\" required ngModel name=\\\"courseCategory\\\" #courseCategory=\\\"ngModel\\\" [(ngModel)]=\\\"category\\\" (change)=\\\"log(courseCategory)\\\">\\n        <option *ngFor=\\\"let category of categories\\\" [value]=\\\"category\\\">{{category}}</option>\\n      </select>\\n      TODO: remove this: {{category}}\\n      <div class=\\\"checkbox\\\">\\n        <label>\\n          <input type=\\\"checkbox\\\" ngModel name=\\\"isGuarantee\\\" [(ngModel)]=\\\"isGuarantee\\\">\\n          Check for 30 days many back guarantee\\n          </label>\\n          <p> {{courseForm.value | json }}</p>\\n      </div>\\n    </div>\\n\\n    <!-- \\n      *Submit*: the (type=\\\"submit\\\") makes it the form submit button. \\n      (ngSubmit)=\\\"onSubmit()\\\" #courseForm=\\\"ngForm\\\": this make the form accessable with in the submit button.\\n      [disabled]=\\\"!courseForm.form.valid\\\": bound the overall form validation to disabled attribute.\\n\\n      *New Hero*: courseForm.reset() need to ba called to reset the courseForm validator flags\\n      the form may remember some flags prior to new hero click so need to reset.\\n    -->\\n    <button type=\\\"submit\\\" class=\\\"btn btn-success\\\" style=\\\"margin-right: 10px\\\" [disabled]=\\\"!courseForm.form.valid\\\">Submit</button>\\n    <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" style=\\\"margin-right: 10px\\\" (click)=\\\"newHero(); courseForm.reset()\\\">New Course</button>\\n  </form>  \\n</div>\\n\\n<div [hidden]=\\\"!submitted\\\">\\n  <h3>You submitted the following:</h3>\\n  <div class=\\\"row\\\" style=\\\"padding-left: 10px;\\\">\\n    <div class=\\\"col-xs-3\\\">Name: </div>\\n    <div class=\\\"col-xs-9  pull-left\\\" style=\\\"color: red;\\\">{{ name }}</div>\\n  </div>\\n  <div class=\\\"row\\\" style=\\\"padding-left: 10px;\\\">\\n    <div class=\\\"col-xs-3\\\">Category: </div>\\n    <div class=\\\"col-xs-9 pull-left\\\" style=\\\"color: red;\\\">{{ category }}</div>\\n  </div>\\n  <div class=\\\"row\\\" style=\\\"padding-left: 10px;\\\">\\n    <div class=\\\"col-xs-3\\\">isGuarantee: </div>\\n    <div class=\\\"col-xs-9 pull-left\\\" style=\\\"color: red;\\\">{{ isGuarantee }}</div>\\n  </div>\\n  <br>\\n  <button class=\\\"btn btn-primary\\\" (click)=\\\"submitted=false\\\">Edit</button>\\n</div>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-form-exercise',\n  templateUrl: './form-exercise.component.html',\n  styleUrls: ['./form-exercise.component.css']\n})\nexport class FormExerciseComponent implements OnInit {\n\n  name = '';\n  category = '';\n  submitted = false;\n  isGuarantee = false;\n\n  categories = [\n    'Development', \n    'Art',\n    'Photographic'\n  ];\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  log(what) {\n    console.log(what);\n  }\n\n  isOnGuarantee(value) {\n    this.isGuarantee = value;\n  }\n\n  onSubmit(heroForm) { \n    this.submitted = true; \n    console.log(\"name = \" + this.name + \", category = \" + this.category);\n  }\n}\n","module.exports = \"\"","module.exports = \"<pre>\\n    Like ngModel create a form-control angular create form-group for each form element.\\n    <b>ngForm</b>: is a directive (the name is a the selector). Angular automatic apply the \\n    ngForm directive (unless is define with not(ngForm)).\\n    <b>ngSubmit</b>: output property of ngForm. We can bind the template variable to ngFrom and \\n    send it to an event property.\\n    <b>fm.form.values</b>: include the values of the form-controls inside the group. This can use to\\n    send directrly to server.\\n    \\n    &lt;form <b style=\\\"color:red;\\\">#fm=\\\"ngForm\\\" (ngSubmit)=\\\"submit(fm)\\\"</b>&gt;\\n      &lt;div class=\\\"form-group\\\"&gt;\\n        &lt;label for=\\\"firstName\\\"&gt;First Name&lt;/label&gt;\\n        &lt;input <b style=\\\"color:red;\\\">require minlegnth=\\\"3\\\" maxlength=10 pattern=\\\"banana\\\" </b> <b>ngModel name=\\\"firstName\\\"</b> #firstName (change)=\\\"log(firstName)\\\" class=\\\"form-control\\\" type=\\\"text\\\" id=\\\"firstName\\\"&gt;\\n        &lt;div class=\\\"alert alert-danger\\\" *ngIf=\\\"firstName.touched && !firstName.valid\\\"&gt;\\n          &lt;div *ngIf=\\\"firstName.errors.required\\\">First name is require ..&lt;/div&gt;\\n          &lt;div *ngIf=\\\"firstName.errors.minlength\\\">First name should be minimum 3 charachters&lt;/div&gt;\\n          &lt;div *ngIf=\\\"firstName.errors.pattern\\\">First name doesn't match the pattern&lt;/div&gt;        \\n        &lt;/div&gt;\\n        &lt;button class=\\\"btn btn-primary\\\"&gt;Submit&lt;button&gt;\\n      &lt;/div&gt;\\n    &lt;/form&gt;\\n  </pre>\\n  <form #fm=\\\"ngForm\\\" (ngSubmit)=\\\"submit(fm)\\\">\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"firstName\\\">First Name</label>\\n      <input ngModel name=\\\"firstName\\\" minlegnth=\\\"3\\\" maxlength=10 pattern=\\\"banana\\\" #firstName=\\\"ngModel\\\" (change)=\\\"log(firstName)\\\" class=\\\"form-control\\\" type=\\\"text\\\" id=\\\"firstName\\\">\\n      <div class=\\\"alert alert-danger\\\" *ngIf=\\\"firstName.touched && !firstName.valid\\\">\\n        <div *ngIf=\\\"firstName.errors.required\\\">First name is require ..</div>\\n        <div *ngIf=\\\"firstName.errors.minlength\\\">First name should be minimum {{firstName.errors.minlength.requiredLength}} charachters</div>\\n        <div *ngIf=\\\"firstName.errors.pattern\\\">First name doesn't match the pattern</div>\\n      </div>\\n  \\n    </div>    \\n    <!-- <div class=\\\"form-group\\\">\\n      <label for=\\\"comment\\\">Comment</label>\\n      <textarea ngModel name=\\\"comment\\\" id=\\\"\\\" cols=\\\"30\\\" rows=\\\"10\\\" class=\\\"form-control\\\"></textarea>\\n    </div> -->\\n      <button class=\\\"btn btn-primary\\\">Submit</button>\\n  </form>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-form-ngform',\n  templateUrl: './form-ngform.component.html',\n  styleUrls: ['./form-ngform.component.css']\n})\nexport class FormNgformComponent {\n\n  submit(fm) {\n    console.log(fm);\n  }\n  log(what) {\n    console.log(what);\n  }\n}\n","module.exports = \"  \"","module.exports = \"<pre>\\n    <b>ngModel</b>: creating implist FormContorl\\n    <b>name</b>: adding ngModel with an attrbiute name=\\\"..\\\" enable to distigush the directive from others.\\n    This all need to add to set template-driven approch for validation.\\n    <b style=\\\"color:red;\\\">require</b>: a field indicate to angular that this field is require\\n\\n    <b>#firstName (change)=\\\"log(firstName)\\\"</b>: adding a template variable just to log the value of ngModel\\n    When type name in the firstName input you can check the console about the ngModel FormControl object.    \\n    The 'control' field is of type control.\\n\\n    <b>add valid validation</b>&lt;div class=\\\"alert alert-danger\\\" *ngIf=\\\"firstName.touched && !firstName.valid\\\"&gt;First Name is Require ..&lt;/div&gt;\\n    this render the div if !firstName.valid and the input is 'touched'.\\n\\n    &lt;form&gt;\\n      &lt;div class=\\\"form-group\\\"&gt;\\n        &lt;label for=\\\"firstName\\\"&gt;First Name&lt;/label&gt;\\n        &lt;input <b style=\\\"color:red;\\\">require</b> <b>ngModel name=\\\"firstName\\\"</b> #firstName (change)=\\\"log(firstName)\\\" class=\\\"form-control\\\" type=\\\"text\\\" id=\\\"firstName\\\"&gt;\\n        &lt;div class=\\\"alert alert-danger\\\" <b>*ngIf=\\\"firstName.touched && !firstName.valid\\\"</b>&gt;First Name is Require ..&lt;/div&gt;\\n      &lt;/div&gt;\\n      &lt;div class=\\\"form-group\\\"&gt;\\n        &lt;label for=\\\"comment\\\"&gt;Comment&lt;/label&gt;\\n        &lt;textarea ngModel name=\\\"comment\\\" id=\\\"\\\" cols=\\\"30\\\" rows=\\\"10\\\" class=\\\"form-control\\\"&gt;&lt;/textarea&gt;\\n      &lt;/div&gt;\\n      &lt;button class=\\\"btn btn-primary\\\"&gt;Submit&lt;button&gt;\\n    &lt;/form&gt;\\n  </pre>\\n  <form>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"firstName\\\">First Name</label>\\n      <input ngModel name=\\\"firstName\\\" #firstName=\\\"ngModel\\\" (change)=\\\"log(firstName)\\\" class=\\\"form-control\\\" type=\\\"text\\\" id=\\\"firstName\\\">\\n      <div class=\\\"alert alert-danger\\\" *ngIf=\\\"firstName.touched && !firstName.valid\\\">First Name is Require ..</div>\\n  \\n    </div>    \\n    <!-- <div class=\\\"form-group\\\">\\n      <label for=\\\"comment\\\">Comment</label>\\n      <textarea ngModel name=\\\"comment\\\" id=\\\"\\\" cols=\\\"30\\\" rows=\\\"10\\\" class=\\\"form-control\\\"></textarea>\\n    </div> -->\\n      <button class=\\\"btn btn-primary\\\">Submit</button>\\n  </form>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-form-ngmodel',\n  templateUrl: './form-ngmodel.component.html',\n  styleUrls: ['./form-ngmodel.component.css']\n})\nexport class FormNgmodelComponent {\n\n  log(what) {\n    console.log(what);\n  }\n}\n","module.exports = \"\"","module.exports = \"<pre>\\n<b>ngModelGroup</b>: a group if form-group. it is combain all the forms in one nested object.\\n#contact=\\\"ngModelGroup\\\" can be reference any where in the template and validate the group as a hole.\\n<b style=\\\"color:red;\\\">&lt;div *ngIf=\\\"!contact.valid\\\"&gt;&lt;/div&gt;</b> validate the entaier group\\n\\n&lt;form <b style=\\\"color:red;\\\">#fm=\\\"ngForm\\\" (ngSubmit)=\\\"submit(fm)\\\"</b>&gt;\\n  &lt;div ngModelGroup=\\\"contact\\\" #contact=\\\"ngModelGroup\\\"&gt;\\n    &lt;div class=\\\"form-group\\\"&gt;\\n      &lt;label for=\\\"firstName\\\"&gt;First Name&lt;/label&gt;\\n      &lt;input <b style=\\\"color:red;\\\">require minlegnth=\\\"3\\\" maxlength=10 pattern=\\\"banana\\\" </b> <b>ngModel name=\\\"firstName\\\"</b> #firstName (change)=\\\"log(firstName)\\\" class=\\\"form-control\\\" type=\\\"text\\\" id=\\\"firstName\\\"&gt;\\n      &lt;div class=\\\"alert alert-danger\\\" *ngIf=\\\"firstName.touched && !firstName.valid\\\"&gt;\\n        &lt;div *ngIf=\\\"firstName.errors.required\\\">First name is require ..&lt;/div&gt;\\n        &lt;div *ngIf=\\\"firstName.errors.minlength\\\">First name should be minimum 3 charachters&lt;/div&gt;\\n        &lt;div *ngIf=\\\"firstName.errors.pattern\\\">First name doesn't match the pattern&lt;/div&gt;\\n      &lt;/div&gt;\\n    &lt;/div&gt;\\n  &lt;/div&gt;\\n  &lt;button class=\\\"btn btn-primary\\\"&gt;Submit&lt;button&gt;\\n&lt;/form&gt;\\n</pre>\\n<form #fm=\\\"ngForm\\\" (ngSubmit)=\\\"submit(fm)\\\">\\n  <div ngModelGroup=\\\"contact\\\" #contact=\\\"ngModelGroup\\\">\\n    <div *ngIf=\\\"!contact.valid\\\"></div>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"firstName\\\">First Name</label>      \\n      <input ngModel name=\\\"firstName\\\" minlegnth=\\\"3\\\" maxlength=10 pattern=\\\"banana\\\" #firstName=\\\"ngModel\\\" (change)=\\\"log(firstName)\\\" class=\\\"form-control\\\" type=\\\"text\\\" id=\\\"firstName\\\">\\n      <div class=\\\"alert alert-danger\\\" *ngIf=\\\"firstName.touched && !firstName.valid\\\">\\n        <div *ngIf=\\\"firstName.errors.required\\\">First name is require ..</div>\\n        <div *ngIf=\\\"firstName.errors.minlength\\\">First name should be minimum {{firstName.errors.minlength.requiredLength}} charachters</div>\\n        <div *ngIf=\\\"firstName.errors.pattern\\\">First name doesn't match the pattern</div>\\n      </div>\\n    </div> \\n  </div>\\n  \\n  <!-- <div class=\\\"form-group\\\">\\n    <label for=\\\"comment\\\">Comment</label>\\n    <textarea ngModel name=\\\"comment\\\" id=\\\"\\\" cols=\\\"30\\\" rows=\\\"10\\\" class=\\\"form-control\\\"></textarea>\\n  </div> -->\\n    <button class=\\\"btn btn-primary\\\">Submit</button>\\n</form>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-form-ngmodelgroup',\n  templateUrl: './form-ngmodelgroup.component.html',\n  styleUrls: ['./form-ngmodelgroup.component.css']\n})\nexport class FormNgmodelgroupComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  log(what) {\n    console.log(what);\n  }\n\n  submit(fm) {\n    console.log(fm);\n  }\n}\n","module.exports = \"\\n/**\\n * this apply to all element with classes of \\n * form-control && ng-touched && ng-invalid.\\n *\\n * Angular add ng-touched && ng-invalid when apply form-control.\\n */\\n.form-control.ng-touched.ng-invalid {\\n  border: 2px solid red;\\n}\\n\"","module.exports = \"<pre>\\nHTML-5 provide sevral directives for validation like minlegnth, maxlegth \\n<b>pattern</b>: apply regular expression.\\nThe form-control check those validations and update the firstName object.\\nCheck the browser console for details about firstName object.\\n\\n<b>Stypling</b>: see the .css file for stying the input field when error occure.\\n\\n&lt;form&gt;\\n  &lt;div class=\\\"form-group\\\"&gt;\\n    &lt;label for=\\\"firstName\\\"&gt;First Name&lt;/label&gt;\\n    &lt;input <b style=\\\"color:red;\\\">require minlegnth=\\\"3\\\" maxlength=10 pattern=\\\"banana\\\" </b> <b>ngModel name=\\\"firstName\\\"</b> #firstName (change)=\\\"log(firstName)\\\" class=\\\"form-control\\\" type=\\\"text\\\" id=\\\"firstName\\\"&gt;\\n    &lt;div class=\\\"alert alert-danger\\\" *ngIf=\\\"firstName.touched && !firstName.valid\\\"&gt;\\n      &lt;div *ngIf=\\\"firstName.errors.required\\\">First name is require ..&lt;/div&gt;\\n        &lt;div *ngIf=\\\"firstName.errors.minlength\\\">First name should be minimum 3 charachters&lt;/div&gt;\\n        &lt;div *ngIf=\\\"firstName.errors.pattern\\\">First name doesn't match the pattern&lt;/div&gt;\\n      &lt;/div&gt;\\n    &lt;/div&gt;\\n  &lt;button class=\\\"btn btn-primary\\\"&gt;Submit&lt;button&gt;\\n&lt;/form&gt;\\n</pre>\\n<form>\\n<div class=\\\"form-group\\\">\\n  <label for=\\\"firstName\\\">First Name</label>\\n  <input ngModel name=\\\"firstName\\\" minlegnth=\\\"3\\\" maxlength=10 pattern=\\\"banana\\\" #firstName=\\\"ngModel\\\" (change)=\\\"log(firstName)\\\" class=\\\"form-control\\\" type=\\\"text\\\" id=\\\"firstName\\\">\\n  <div class=\\\"alert alert-danger\\\" *ngIf=\\\"firstName.touched && !firstName.valid\\\">\\n    <div *ngIf=\\\"firstName.errors.required\\\">First name is require ..</div>\\n    <div *ngIf=\\\"firstName.errors.minlength\\\">First name should be minimum {{firstName.errors.minlength.requiredLength}} charachters</div>\\n    <div *ngIf=\\\"firstName.errors.pattern\\\">First name doesn't match the pattern</div>\\n  </div>\\n\\n</div>    \\n<!-- <div class=\\\"form-group\\\">\\n  <label for=\\\"comment\\\">Comment</label>\\n  <textarea ngModel name=\\\"comment\\\" id=\\\"\\\" cols=\\\"30\\\" rows=\\\"10\\\" class=\\\"form-control\\\"></textarea>\\n</div> -->\\n  <button class=\\\"btn btn-primary\\\">Submit</button>\\n</form>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-form-validations',\n  templateUrl: './form-validations.component.html',\n  styleUrls: ['./form-validations.component.css']\n})\nexport class FormValidationsComponent {\n\n  log(what) {\n    console.log(what);\n  }\n}\n","module.exports = \"\"","module.exports = \"\\n<div class=\\\"row\\\">\\n  <!-- <a class=\\\"nav-link\\\" [routerLink]=\\\"['/forms', 'angular']\\\" style=\\\"background-color: black; color: coral; width: 90px;\\\" href=\\\"#\\\">Angular</a>\\n  <a class=\\\"nav-link\\\" [routerLink]=\\\"['/forms', 'exercise']\\\" style=\\\"background-color: black; color: coral; width: 90px;\\\" href=\\\"#\\\">Exercise</a> -->\\n  <a \\n    class=\\\"nav-link\\\" \\n    [routerLink]=\\\"['/forms', 'examples']\\\" \\n    style=\\\"background-color: black; color: coral; width: 80px; margin-bottom: 10px; margin-left: 15px;\\\" \\n    href=\\\"#\\\">Examples</a>\\n\\n</div>\\n<router-outlet></router-outlet>\\n\\n<div class=\\\"row\\\">\\n  <!-- this is the left column -->\\n  <div class=\\\"col-6\\\" style=\\\"border-style: ridge;\\\">\\n    <hr>\\n    <h4>Note: Form Basic</h4>\\n    <app-form-basic></app-form-basic>    \\n    <hr>\\n    <h4>Note: Using ngModel to create form control</h4>\\n    <app-form-ngmodel></app-form-ngmodel>\\n    <hr>    \\n    <h4>Note: Disbale the Submit Button</h4>\\n    <app-form-disablesubmit></app-form-disablesubmit>\\n    <hr>\\n  </div>\\n  <div class=\\\"col-6\\\" style=\\\"border-style: ridge;\\\">\\n    <!-- this is the right column -->\\n    <hr>\\n    <h4>Note: Form Control Validations</h4>\\n    <app-form-validations></app-form-validations>\\n    <hr>    \\n    <h4>Note: Using ngForm</h4>\\n    <app-form-ngform></app-form-ngform>\\n    <hr>    \\n    <h4>Note: Using ngModelGroup</h4>\\n    <app-form-ngmodelgroup></app-form-ngmodelgroup>\\n    <hr>        \\n  </div>\\n</div>\\n  \"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-forms',\n  templateUrl: './forms.component.html',\n  styleUrls: ['./forms.component.css']\n})\nexport class FormsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"row\\\">\\n  <!-- this is the left column -->\\n  <div class=\\\"col-6\\\" style=\\\"border-style: ridge;\\\">\\n    <hr>\\n  </div>\\n  <div class=\\\"col-6\\\" style=\\\"border-style: ridge;\\\">\\n    <!-- this is the right column -->\\n    <hr>\\n  </div>\\n</div>\\n  \"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-routing',\n  templateUrl: './routing.component.html',\n  styleUrls: ['./routing.component.css']\n})\nexport class RoutingComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}